// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise'
import { OpenAPI } from './core/OpenAPI'
import { request as __request } from './core/request'
import type {
  AddProjectMemberData,
  AddProjectMemberResponse,
  AllowPublicKeyData,
  AllowPublicKeyResponse,
  ArchivePresentationTemplateData,
  ArchivePresentationTemplateResponse,
  ArchiveSdJwtVcTemplateData,
  ArchiveSdJwtVcTemplateResponse,
  CreateIssuanceOfferData,
  CreateIssuanceOfferResponse,
  CreatePresentationTemplateData,
  CreatePresentationTemplateResponse,
  CreateProjectData,
  CreateProjectResponse,
  CreateSdJwtVcTemplateData,
  CreateSdJwtVcTemplateResponse,
  CreateVerificationRequestData,
  CreateVerificationRequestResponse,
  CreateWebhookData,
  CreateWebhookResponse,
  CreateWorkflowBasedOnYamlData,
  CreateWorkflowBasedOnYamlResponse,
  DeleteWebhookData,
  DeleteWebhookResponse,
  DeleteWorkflowData,
  DeleteWorkflowResponse,
  ExecuteWorkflowData,
  ExecuteWorkflowResponse,
  GetAllExecutionsPaginatedData,
  GetAllExecutionsPaginatedResponse,
  GetAllMediatorsResponse,
  GetAllOpenId4VcIssuanceSessionsData,
  GetAllOpenId4VcIssuanceSessionsResponse,
  GetAllOpenId4VcVerificationSessionsData,
  GetAllOpenId4VcVerificationSessionsResponse,
  GetAllPresentationTemplatesPaginatedData,
  GetAllPresentationTemplatesPaginatedResponse,
  GetAllProjectMembersData,
  GetAllProjectMembersResponse,
  GetAllProjectsResponse,
  GetAllSdJwtVcTemplatesData,
  GetAllSdJwtVcTemplatesResponse,
  GetAllWorkflowsData,
  GetAllWorkflowsResponse,
  GetAllowedConnectionsPaginatedData,
  GetAllowedConnectionsPaginatedResponse,
  GetConceptData,
  GetConceptResponse,
  GetExecutionData,
  GetExecutionResponse,
  GetMediatorByIdData,
  GetMediatorByIdResponse,
  GetOpenId4VcIssuanceSessionByIdData,
  GetOpenId4VcIssuanceSessionByIdResponse,
  GetOpenId4VcVerificationSessionByIdData,
  GetOpenId4VcVerificationSessionByIdResponse,
  GetPresentationTemplateData,
  GetPresentationTemplateResponse,
  GetProfileData,
  GetProfileResponse,
  GetSdJwtVcTemplateData,
  GetSdJwtVcTemplateJsonSchemaData,
  GetSdJwtVcTemplateJsonSchemaResponse,
  GetSdJwtVcTemplateResponse,
  GetWebhooksData,
  GetWebhooksResponse,
  GetWorkflowData,
  GetWorkflowResponse,
  PublishWorkflowData,
  PublishWorkflowResponse,
  RemoveProjectMemberData,
  RemoveProjectMemberResponse,
  RevokePublicKeyAllowanceData,
  RevokePublicKeyAllowanceResponse,
  UnpublishWorkflowData,
  UnpublishWorkflowResponse,
  UpdatePresentationTemplateData,
  UpdatePresentationTemplateResponse,
  UpdateProfileData,
  UpdateProfileResponse,
  UpdateSdJwtVcTemplateData,
  UpdateSdJwtVcTemplateResponse,
  UpdateWorkflowByYamlData,
  UpdateWorkflowByYamlResponse,
} from './types.gen'

export class ProjectsService {
  /**
   * Retrieve projects
   * Retrieve all projects for the user associated with the API key being used for the request.
   *
   * ## Example
   * An example query that searches for all projects where the name includes "Example" and order them by the date
   * they were created descending, limiting the page size to 10
   * ```
   * /v1/projects?search[name]=Example&sort=-createdAt&page[size]=10
   * ```
   *
   * ## Query parameters
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `search[<property>]` - Search the results by the given sub-value of a property case-insensitive. You can search by multiple properties by providing multiple `search[<property>]` query parameters.
   * - `sort` - Sort the results by the given property. If you want to sort in descending order you can prefix the property with a `-`.
   *
   * The following parameters are supported for this endpoint:
   * - filter: `id`, `name`
   * - search: `name`
   * - sort: `id`, `createdAt`, `updatedAt` (default: `sort=-updatedAt`)
   *
   * ## Pagination
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @returns JsonApiResponse_Project_Array_ Ok
   * @throws ApiError
   */
  public static getAllProjects(): CancelablePromise<GetAllProjectsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects',
    })
  }

  /**
   * Create new project
   * Creates a new project under the user which is associated with the API key being used for the request.
   * The user will be the owner of the project.
   *
   * Creating multiple projects is not available in the Free tier.
   *
   * Note that the project cannot be deleted yet so be careful with creating projects.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Project Ok
   * @throws ApiError
   */
  public static createProject(data: CreateProjectData): CancelablePromise<CreateProjectResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Retrieve project members
   * Retrieve all members associated with the provided `projectId`.
   *
   * ## Example
   * An example query that searches for all members where in project, limiting the page size to 10
   * ```
   * /v1/projects/{projectId}/members?page[size]=10
   * ```
   *
   * ## Query parameters
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `search[<property>]` - Search the results by the given sub-value of a property case-insensitive. You can search by multiple properties by providing multiple `search[<property>]` query parameters.
   * - `sort` - Sort the results by the given property. If you want to sort in descending order you can prefix the property with a `-`.
   *
   * The following parameters are supported for this endpoint:
   * - filter: `id`
   * - search: -
   * - sort: `id`
   *
   * ## Pagination
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.projectId
   * @returns JsonApiResponse_ProjectMember_Array_ Ok
   * @throws ApiError
   */
  public static getAllProjectMembers(data: GetAllProjectMembersData): CancelablePromise<GetAllProjectMembersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/members',
      path: {
        projectId: data.projectId,
      },
    })
  }

  /**
   * Add member to project
   * Add a member to the provided project by email. Beware that the user already needs to exist in the system.
   *
   * **Note:** Only the owner of the project is able to add members to the project.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns void No content
   * @throws ApiError
   */
  public static addProjectMember(data: AddProjectMemberData): CancelablePromise<AddProjectMemberResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/members/add',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Remove member from project
   * Remove a member from the provided project by email.
   *
   * **Note:** Only the owner of the project is able to remove members from the project.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns void No content
   * @throws ApiError
   */
  public static removeProjectMember(data: RemoveProjectMemberData): CancelablePromise<RemoveProjectMemberResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/members/remove',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }
}

export class WorkflowsService {
  /**
   * Retrieve workflow
   * Get a workflow using the workflow ID.
   *
   * You can only retrieve workflows that belong to the project associated with the API key.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.workflowId
   * @returns Workflow Ok
   * @throws ApiError
   */
  public static getWorkflow(data: GetWorkflowData): CancelablePromise<GetWorkflowResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/workflows/{workflowId}',
      path: {
        projectId: data.projectId,
        workflowId: data.workflowId,
      },
      errors: {
        404: 'Workflow not found',
      },
    })
  }

  /**
   * Delete workflow
   * Delete a workflow using the workflow ID.
   *
   * You can only delete workflows that belong to the project associated with the API key.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.workflowId
   * @returns void Deleted
   * @throws ApiError
   */
  public static deleteWorkflow(data: DeleteWorkflowData): CancelablePromise<DeleteWorkflowResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/projects/{projectId}/workflows/{workflowId}',
      path: {
        projectId: data.projectId,
        workflowId: data.workflowId,
      },
      errors: {
        404: 'Not found error',
      },
    })
  }

  /**
   * Publish workflow
   * Publish a workflow using the workflow ID.
   * If the workflow is already in `published` state, nothing will be done and the workflow will be returned.
   *
   * When the `trigger.type` is not set on the workflow, the workflow will be published using a default trigger
   * type of `api`.
   *
   * You can only publish workflows that belong to the project associated with the API key.
   *
   * Using the api to publish and unpublish workflows is more complex, and for most use cases we recommend using the online
   * workflow editor hosted on [paradym.id](https://paradym.id). The workflow editor will automatically guide
   * you through the process of publishing and unpublishing workflows.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.workflowId
   * @returns Workflow Ok
   * @throws ApiError
   */
  public static publishWorkflow(data: PublishWorkflowData): CancelablePromise<PublishWorkflowResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/workflows/{workflowId}/publish',
      path: {
        projectId: data.projectId,
        workflowId: data.workflowId,
      },
    })
  }

  /**
   * Unpublish workflow
   * Unpublish a workflow using the workflow ID.
   * If the workflow is already in `draft` state, nothing will be done and the workflow will be returned.
   *
   * Using the `forceCancelExecutions` property, you can force the cancellation of all executions of the workflow.
   * Note this can be a dangerous operation as all executions will be stopped in progress. If `forceCancelExecutions`
   * is `false`, and the workflow has any executions in progress, the unpublish operation will fail. Otherwise all open executions
   * are canceled. Note, this may take some time as executions can only be cancelled after the currently running action finished, or the workflow reaches the 'OnHold' state.
   *
   * You can only unpublish workflows that belong to the project associated with the API key.
   *
   * Using the api to publish and unpublish workflows is more complex, and for most use cases we recommend using the online
   * workflow editor hosted on [paradym.id](https://paradym.id). The workflow editor will automatically guide
   * you through the process of publishing and unpublishing workflows.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.workflowId
   * @param data.requestBody
   * @returns Workflow Ok
   * @throws ApiError
   */
  public static unpublishWorkflow(data: UnpublishWorkflowData): CancelablePromise<UnpublishWorkflowResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/workflows/{workflowId}/unpublish',
      path: {
        projectId: data.projectId,
        workflowId: data.workflowId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Retrieve workflows
   * Retrieve all workflows for the project associated with the API key being used for the request.
   *
   * Items are ordered by the last time they were updated descending (latest updated first).
   *
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `sort` - Sort the results by the given property.
   *
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.projectId
   * @returns JsonApiResponse_Workflow_Array_ Ok
   * @throws ApiError
   */
  public static getAllWorkflows(data: GetAllWorkflowsData): CancelablePromise<GetAllWorkflowsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/workflows',
      path: {
        projectId: data.projectId,
      },
    })
  }
}

export class WorkflowExecutionsService {
  /**
   * Execute workflow
   * Execute a workflow using the workflow ID and workflow input.
   *
   * The workflow must have a trigger of type `api` for the workflow to be able to be executed through the api. An
   * error will be returned if the workflow does not have a trigger of type `api`.
   *
   * If the workflow cannot be executed, e.g. due to the workflow having an invalid state or trigger defined, an error
   * will be returned. In addition, the input for the workflow will be validated against the workflow input schema. If the input does not
   * match the schema, an immediately finished execution will be created with a state of `failed`.
   *
   * You can only execute workflows that belong to the project associated with the API key.
   *
   * See the API execution part of the [Executing a Workflow](https://docs.paradym.id/workflow-builder/executing-a-workflow#api-execution) guide for more information.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns WorkflowExecution Ok
   * @throws ApiError
   */
  public static executeWorkflow(data: ExecuteWorkflowData): CancelablePromise<ExecuteWorkflowResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/executions',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'WorkflowExecution failed',
        404: 'Workflow not found',
      },
    })
  }

  /**
   * Retrieve executions
   * Retrieve all workflow executions for the project associated with the API key. You can optionally provide a
   * `filter[workflowId]` in the query string to filter the results for a specific workflow.
   *
   * Items are ordered by the last time they were updated descending (latest updated first).
   *
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `sort` - Sort the results by the given property.
   *
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.projectId
   * @returns JsonApiResponse_WorkflowExecution_Array_ Ok
   * @throws ApiError
   */
  public static getAllExecutionsPaginated(
    data: GetAllExecutionsPaginatedData
  ): CancelablePromise<GetAllExecutionsPaginatedResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/executions',
      path: {
        projectId: data.projectId,
      },
      errors: {
        400: 'Error parsing request',
      },
    })
  }

  /**
   * Retrieve execution
   * Retrieve an execution using the workflow execution ID.
   *
   * You can only retrieve workflows executions that belong to the project associated with the API key.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.workflowExecutionId
   * @returns WorkflowExecution Ok
   * @throws ApiError
   */
  public static getExecution(data: GetExecutionData): CancelablePromise<GetExecutionResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/executions/{workflowExecutionId}',
      path: {
        projectId: data.projectId,
        workflowExecutionId: data.workflowExecutionId,
      },
      errors: {
        404: 'WorkflowExecution not found',
      },
    })
  }
}

export class WebhooksService {
  /**
   * Retrieve webhooks
   * Retrieve all webhooks associated associated with the provided `projectId`.
   *
   * ## Example
   * An example query that searches for all webhooks where the name includes "Example" and order them by the date
   * they were created descending, limiting the page size to 10
   * ```
   * /v1/projects/{projectId}/webhooks?search[name]=Example&sort=-createdAt&page[size]=10
   * ```
   *
   * ## Query parameters
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `search[<property>]` - Search the results by the given sub-value of a property case-insensitive. You can search by multiple properties by providing multiple `search[<property>]` query parameters.
   * - `sort` - Sort the results by the given property. If you want to sort in descending order you can prefix the property with a `-`.
   *
   * The following parameters are supported for this endpoint:
   * - filter: `id`
   * - search: `name`, 'url'
   * - sort: `id`, `createdAt`, `updatedAt` (default: `sort=-updatedAt`)
   *
   * ## Pagination
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.projectId
   * @returns JsonApiResponse_WebhookSubscription_Array_ Ok
   * @throws ApiError
   */
  public static getWebhooks(data: GetWebhooksData): CancelablePromise<GetWebhooksResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/webhooks',
      path: {
        projectId: data.projectId,
      },
    })
  }

  /**
   * Create new webhook
   * Create a new webhook for the given project.
   *
   * The webhook will be used to send notifications to the given URL.
   *
   * The URL must be reachable from the internet. We will send a request to the given URL to verify that it's reachable.
   *
   * When it's created you will get a signatureSecret. This secret is used to sign the request body. You can use this secret to verify that the request is coming from us.
   *
   * For more information take a look at the [webhook documentation](https://docs.paradym.id/api-and-dashboard/using-webhooks).
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns WebhookSubscriptionWithSecret Ok
   * @throws ApiError
   */
  public static createWebhook(data: CreateWebhookData): CancelablePromise<CreateWebhookResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/webhooks',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Delete webhook
   * Delete a webhook by ID.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.webhookId
   * @returns void Deleted
   * @throws ApiError
   */
  public static deleteWebhook(data: DeleteWebhookData): CancelablePromise<DeleteWebhookResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/projects/{projectId}/webhooks/{webhookId}',
      path: {
        projectId: data.projectId,
        webhookId: data.webhookId,
      },
      errors: {
        404: 'Not found error',
      },
    })
  }
}

export class OpenId4VcVerificationService {
  /**
   * Retrieve OpenID4VC verification sessions
   * Retrieve all OpenId4VC verification sessions associated with the provided `projectId`.
   *
   * ## Example
   * An example query that searches for all verification sessions where the status is "requested" and order them by the date
   * they were created descending, limiting the page size to 10
   * ```
   * /v1/projects/{projectId}/openid4vc/verification?filter[status]=requested&sort=-createdAt&page[size]=10
   * ```
   *
   * ## Query parameters
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `search[<property>]` - Search the results by the given sub-value of a property case-insensitive. You can search by multiple properties by providing multiple `search[<property>]` query parameters.
   * - `sort` - Sort the results by the given property. If you want to sort in descending order you can prefix the property with a `-`.
   *
   * The following parameters are supported for this endpoint:
   * - filter: `id`, `status`
   * - search: -
   * - sort: `id`, `createdAt`, `updatedAt` (default: `sort=-updatedAt`)
   *
   * ## Pagination
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.projectId
   * @returns JsonApiResponse_OpenId4VcVerification_Array_ Ok
   * @throws ApiError
   */
  public static getAllOpenId4VcVerificationSessions(
    data: GetAllOpenId4VcVerificationSessionsData
  ): CancelablePromise<GetAllOpenId4VcVerificationSessionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/openid4vc/verification',
      path: {
        projectId: data.projectId,
      },
    })
  }

  /**
   * Retrieve OpenID4VC verification session
   * Retrieve a specific OpenID4VC verification session by its id.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.verificationSessionId
   * @returns OpenId4VcVerification Ok
   * @throws ApiError
   */
  public static getOpenId4VcVerificationSessionById(
    data: GetOpenId4VcVerificationSessionByIdData
  ): CancelablePromise<GetOpenId4VcVerificationSessionByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/openid4vc/verification/{verificationSessionId}',
      path: {
        projectId: data.projectId,
        verificationSessionId: data.verificationSessionId,
      },
      errors: {
        404: 'OpenId4Vc Verification not found',
      },
    })
  }

  /**
   * Create OpenID4VC verification request
   * Create an OpenID4VC verification request for the selected presentation template.
   *
   * See the API execution part of the [Verify Credentials](https://docs.paradym.id/api-and-dashboard/verify-credentials) guide for more information.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns OpenId4VcVerification Ok
   * @throws ApiError
   */
  public static createVerificationRequest(
    data: CreateVerificationRequestData
  ): CancelablePromise<CreateVerificationRequestResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/openid4vc/verification/request',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        404: 'Presentation Template not found',
      },
    })
  }
}

export class OpenId4VcIssuanceService {
  /**
   * Retrieve OpenID4VC issuance sessions
   * Retrieve all OpenId4VC issuance sessions associated with the provided `projectId`.
   *
   * ## Example
   * An example query that searches for all issuance sessions where the status is "offered" and order them by the date
   * they were created descending, limiting the page size to 10
   * ```
   * /v1/projects/{projectId}/openid4vc/issuance?filter[status]=offered&sort=-createdAt&page[size]=10
   * ```
   *
   * ## Query parameters
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `search[<property>]` - Search the results by the given sub-value of a property case-insensitive. You can search by multiple properties by providing multiple `search[<property>]` query parameters.
   * - `sort` - Sort the results by the given property. If you want to sort in descending order you can prefix the property with a `-`.
   *
   * The following parameters are supported for this endpoint:
   * - filter: `id`, `status`
   * - search: -
   * - sort: `id`, `createdAt`, `updatedAt` (default: `sort=-updatedAt`)
   *
   * ## Pagination
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.projectId
   * @returns JsonApiResponse_OpenId4VcIssuance_Array_ Ok
   * @throws ApiError
   */
  public static getAllOpenId4VcIssuanceSessions(
    data: GetAllOpenId4VcIssuanceSessionsData
  ): CancelablePromise<GetAllOpenId4VcIssuanceSessionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/openid4vc/issuance',
      path: {
        projectId: data.projectId,
      },
    })
  }

  /**
   * Retrieve OpenID4VC issuance session
   * Retrieve a specific OpenID4VC issuance session by its id.
   * @param data The data for the request.
   * @param data.issuanceSessionId
   * @param data.projectId
   * @returns OpenId4VcIssuance Ok
   * @throws ApiError
   */
  public static getOpenId4VcIssuanceSessionById(
    data: GetOpenId4VcIssuanceSessionByIdData
  ): CancelablePromise<GetOpenId4VcIssuanceSessionByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/openid4vc/issuance/{issuanceSessionId}',
      path: {
        issuanceSessionId: data.issuanceSessionId,
        projectId: data.projectId,
      },
      errors: {
        404: 'OpenId4Vc Issuance Session not found',
      },
    })
  }

  /**
   * Create OpenID4VC credential offer
   * Create a OpenID4VC issuance offer for the selected credentials
   *
   * See the API execution part of the [Issue Credential](https://docs.paradym.id/api-and-dashboard/issue-credentials) guide for more information.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns OpenId4VcIssuance Ok
   * @throws ApiError
   */
  public static createIssuanceOffer(data: CreateIssuanceOfferData): CancelablePromise<CreateIssuanceOfferResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/openid4vc/issuance/offer',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        404: 'Credential Template(s) not found',
      },
    })
  }
}

export class ProjectProfileService {
  /**
   * Retrieve default profile
   * Retrieve the profile of the project this will be used for the OpenId4VC display. If there is no profile yet it will create one with the project name.
   * @param data The data for the request.
   * @param data.projectId
   * @returns ProjectProfile Ok
   * @throws ApiError
   */
  public static getProfile(data: GetProfileData): CancelablePromise<GetProfileResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/profiles/default',
      path: {
        projectId: data.projectId,
      },
    })
  }

  /**
   * Update default profile
   * Updates the profile of the project this will be used for the OpenId4VC display.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns ProjectProfile Ok
   * @throws ApiError
   */
  public static updateProfile(data: UpdateProfileData): CancelablePromise<UpdateProfileResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/projects/{projectId}/profiles/default',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }
}

export class PresentationTemplatesService {
  /**
   * Retrieve presentation templates
   * Retrieve all presentation templates associated with the provided `projectId`.
   *
   * ## Example
   * An example query that searches for all presentation templates where the name includes "My Template",
   * ordering them by the date they were created descending, limiting the page size to 10
   * ```
   * /v1/projects/{projectId}/templates/presentations?search[name]=My Template&sort[-createdAt]&page[size]=10
   * ```
   *
   * ## Query parameters
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `search[<property>]` - Search the results by the given sub-value of a property case-insensitive. You can search by multiple properties by providing multiple `search[<property>]` query parameters.
   * - `sort` - Sort the results by the given property. If you want to sort in descending order you can prefix the property with a `-`.
   *
   * The following parameters are supported for this endpoint:
   * - filter: `id`
   * - search: `name`
   * - sort: `id`, `createdAt`, `updatedAt` (default: `sort=-updatedAt`)
   *
   * ## Pagination
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.projectId
   * @returns JsonApiResponse_PresentationTemplate_Array_ Ok
   * @throws ApiError
   */
  public static getAllPresentationTemplatesPaginated(
    data: GetAllPresentationTemplatesPaginatedData
  ): CancelablePromise<GetAllPresentationTemplatesPaginatedResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/templates/presentations',
      path: {
        projectId: data.projectId,
      },
    })
  }

  /**
   * Create presentation template
   * Create a new presentation template.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns PresentationTemplate Ok
   * @throws ApiError
   */
  public static createPresentationTemplate(
    data: CreatePresentationTemplateData
  ): CancelablePromise<CreatePresentationTemplateResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/templates/presentations',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Retrieve presentation template
   * Retrieve a specific presentation template by its id.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.presentationTemplateId
   * @returns PresentationTemplate Ok
   * @throws ApiError
   */
  public static getPresentationTemplate(
    data: GetPresentationTemplateData
  ): CancelablePromise<GetPresentationTemplateResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/templates/presentations/{presentationTemplateId}',
      path: {
        projectId: data.projectId,
        presentationTemplateId: data.presentationTemplateId,
      },
    })
  }

  /**
   * Update presentation template
   * Update a specific presentation template.
   *
   * This will replace the entire template with the new one.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.presentationTemplateId
   * @param data.requestBody
   * @returns PresentationTemplate Ok
   * @throws ApiError
   */
  public static updatePresentationTemplate(
    data: UpdatePresentationTemplateData
  ): CancelablePromise<UpdatePresentationTemplateResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/projects/{projectId}/templates/presentations/{presentationTemplateId}',
      path: {
        projectId: data.projectId,
        presentationTemplateId: data.presentationTemplateId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Archive presentation template
   * Archive a specific presentation template by its id.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.presentationTemplateId
   * @returns void Deleted
   * @throws ApiError
   */
  public static archivePresentationTemplate(
    data: ArchivePresentationTemplateData
  ): CancelablePromise<ArchivePresentationTemplateResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/projects/{projectId}/templates/presentations/{presentationTemplateId}',
      path: {
        projectId: data.projectId,
        presentationTemplateId: data.presentationTemplateId,
      },
      errors: {
        404: 'Not found error',
      },
    })
  }
}

export class MediatorsService {
  /**
   * Retrieve mediators
   * Get all the mediators for the current user. All of these you can use to allow certain public keys to connect to the mediator.
   *
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `sort` - Sort the results by the given property.
   *
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @returns JsonApiResponse_Mediator_Array_ Ok
   * @throws ApiError
   */
  public static getAllMediators(): CancelablePromise<GetAllMediatorsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/mediators',
      errors: {
        400: 'Error parsing request',
      },
    })
  }

  /**
   * Retrieve mediator
   * Get a specific mediator by its id.
   * @param data The data for the request.
   * @param data.mediatorId
   * @returns Mediator Ok
   * @throws ApiError
   */
  public static getMediatorById(data: GetMediatorByIdData): CancelablePromise<GetMediatorByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/mediators/{mediatorId}',
      path: {
        mediatorId: data.mediatorId,
      },
    })
  }

  /**
   * Retrieve mediator allowed connections
   * This gives the possibility to fetch the current unused public keys for a mediator connection.
   *
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `sort` - Sort the results by the given property.
   *
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.mediatorId
   * @returns JsonApiResponse_MediatorAllowedConnection_Array_ Ok
   * @throws ApiError
   */
  public static getAllowedConnectionsPaginated(
    data: GetAllowedConnectionsPaginatedData
  ): CancelablePromise<GetAllowedConnectionsPaginatedResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/mediators/{mediatorId}/public-keys',
      path: {
        mediatorId: data.mediatorId,
      },
      errors: {
        400: 'Error parsing request',
      },
    })
  }

  /**
   * Allow public key for mediator
   * Allow a public key for a mediator connection by its public key. When the wallet tries to connect with the mediator it will be matched with the public key.
   * After it's matched the public key will be deleted from the allowed connections.
   * @param data The data for the request.
   * @param data.mediatorId
   * @param data.requestBody
   * @returns MediatorAllowedConnection Ok
   * @throws ApiError
   */
  public static allowPublicKey(data: AllowPublicKeyData): CancelablePromise<AllowPublicKeyResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/mediators/{mediatorId}/public-keys',
      path: {
        mediatorId: data.mediatorId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Revoke public key for mediator
   * Revoke a public key allowance for a mediator connection by its public key id.
   * @param data The data for the request.
   * @param data.mediatorId
   * @param data.publicKeyId
   * @returns void Deleted
   * @throws ApiError
   */
  public static revokePublicKeyAllowance(
    data: RevokePublicKeyAllowanceData
  ): CancelablePromise<RevokePublicKeyAllowanceResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/mediators/{mediatorId}/public-keys/{publicKeyId}',
      path: {
        mediatorId: data.mediatorId,
        publicKeyId: data.publicKeyId,
      },
      errors: {
        404: 'Not found error',
      },
    })
  }
}

export class CredentialTemplatesService {
  /**
   * Retrieve sd-jwt-vc credential templates
   * Retrieve all `sd-jwt-vc` credential templates associated with the provided `projectId`.
   *
   * ## Example
   * An example query that searches for all SD-JWT VC credential templates where the name includes "My Template" and are not revocable,
   * ordering them by the date they were created descending, limiting the page size to 10
   * ```
   * /v1/projects/{projectId}/templates/credentials/sd-jwt-vc?filter[revocable]=false&search[name]=My Template&sort[-createdAt]&page[size]=10
   * ```
   *
   * ## Query parameters
   * We are using the [JSON:API 1.1](https://jsonapi.org/) specification for requesting a list of entities.
   * From this specification we support the following query parameters:
   * - `filter[<property>]` - Filter the results by the given property. You can filter by multiple properties by providing multiple `filter[<property>]` query parameters. At the moment it's only possible to filter the properties in the root of the object. Also, some properties are not filterable because of performance reasons.
   * - `search[<property>]` - Search the results by the given sub-value of a property case-insensitive. You can search by multiple properties by providing multiple `search[<property>]` query parameters.
   * - `sort` - Sort the results by the given property. If you want to sort in descending order you can prefix the property with a `-`.
   *
   * The following parameters are supported for this endpoint:
   * - filter: `id`, `type`, `revocable`
   * - search: `name`
   * - sort: `id`, `createdAt`, `updatedAt` (default: `sort=-updatedAt`)
   *
   * ## Pagination
   * We also implemented the [Cursor Pagination Profile](https://jsonapi.org/profiles/ethanresnick/cursor-pagination/) for pagination.
   * This means that you can use the `page[size]`, `page[before]` and `page[after]` query parameters to retrieve the next or previous page of results.
   * The `page[size]` parameter is used to set the number of items per page. The `page[before]` and `page[after]` parameters are used to set the cursor.
   * The cursor is the ID of the last item on the previous page, or the first item on the next page.
   * @param data The data for the request.
   * @param data.projectId
   * @returns JsonApiResponse_SdJwtCredentialTemplate_Array_ Ok
   * @throws ApiError
   */
  public static getAllSdJwtVcTemplates(
    data: GetAllSdJwtVcTemplatesData
  ): CancelablePromise<GetAllSdJwtVcTemplatesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc',
      path: {
        projectId: data.projectId,
      },
    })
  }

  /**
   * Create sd-jwt-vc credential template
   * Create a new `sd-jwt-vc` credential template.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns SdJwtCredentialTemplate Ok
   * @throws ApiError
   */
  public static createSdJwtVcTemplate(
    data: CreateSdJwtVcTemplateData
  ): CancelablePromise<CreateSdJwtVcTemplateResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Update sd-jwt-vc credential template
   * Update a specific `sd-jwt-vc` credential template by its id.
   *
   * This will replace the entire template with the new one.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.credentialTemplateId
   * @param data.requestBody
   * @returns SdJwtCredentialTemplate Ok
   * @throws ApiError
   */
  public static updateSdJwtVcTemplate(
    data: UpdateSdJwtVcTemplateData
  ): CancelablePromise<UpdateSdJwtVcTemplateResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc/{credentialTemplateId}',
      path: {
        projectId: data.projectId,
        credentialTemplateId: data.credentialTemplateId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Retrieve sd-jwt-vc credential template
   * Retrieve a specific `sd-jwt-vc` credential template by its id.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.credentialTemplateId
   * @returns SdJwtCredentialTemplate Ok
   * @throws ApiError
   */
  public static getSdJwtVcTemplate(data: GetSdJwtVcTemplateData): CancelablePromise<GetSdJwtVcTemplateResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc/{credentialTemplateId}',
      path: {
        projectId: data.projectId,
        credentialTemplateId: data.credentialTemplateId,
      },
    })
  }

  /**
   * Archive sd-jwt-vc credential template
   * Archive a specific `sd-jwt-vc` credential template by its id.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.credentialTemplateId
   * @returns void Archived
   * @throws ApiError
   */
  public static archiveSdJwtVcTemplate(
    data: ArchiveSdJwtVcTemplateData
  ): CancelablePromise<ArchiveSdJwtVcTemplateResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc/{credentialTemplateId}',
      path: {
        projectId: data.projectId,
        credentialTemplateId: data.credentialTemplateId,
      },
      errors: {
        404: 'Not found error',
      },
    })
  }

  /**
   * Retrieve JSON schema for sd-jwt-vc credential template
   * Get the JSON schema for an `sd-jwt-vc` credential template.
   *
   * You could use this for to generate forms or validate the input.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.credentialTemplateId
   * @returns CredentialTemplateJsonSchema Ok
   * @throws ApiError
   */
  public static getSdJwtVcTemplateJsonSchema(
    data: GetSdJwtVcTemplateJsonSchemaData
  ): CancelablePromise<GetSdJwtVcTemplateJsonSchemaResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc/{credentialTemplateId}/json-schema',
      path: {
        projectId: data.projectId,
        credentialTemplateId: data.credentialTemplateId,
      },
    })
  }
}

export class WorkflowYamlService {
  /**
   * Create workflow from YAML
   * Create a new workflow.
   *
   * The workflow will be created in a `draft` state. Before the workflow can be used, it first needs to be published,
   * this can be done using the publish endpoint.
   *
   * Using the api to create a workflow is more complex, and for most use cases we recommend using the online
   * workflow editor hosted on [paradym.id](https://paradym.id). The workflow editor will automatically guide
   * you through the process of creating and updating workflows.
   *
   * See [building a workflow](https://docs.paradym.id/workflow-builder/guides/building-a-workflow) for more information.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.requestBody
   * @returns Workflow Ok
   * @throws ApiError
   */
  public static createWorkflowBasedOnYaml(
    data: CreateWorkflowBasedOnYamlData
  ): CancelablePromise<CreateWorkflowBasedOnYamlResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/projects/{projectId}/workflows/yaml',
      path: {
        projectId: data.projectId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * Get YAML concept for workflow
   * @param data The data for the request.
   * @param data.projectId
   * @param data.workflowId
   * @returns WorkflowEditor Ok
   * @throws ApiError
   */
  public static getConcept(data: GetConceptData): CancelablePromise<GetConceptResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/projects/{projectId}/workflows/{workflowId}/yaml',
      path: {
        projectId: data.projectId,
        workflowId: data.workflowId,
      },
    })
  }

  /**
   * Update workflow from YAML
   * Update a workflow with the provided yaml.
   *
   * The workflow can only be updated in a `draft` state. Before the workflow can be used, it first needs to be published,
   * this can be done using the publish endpoint.
   *
   * Using the api to update a workflow is more complex, and for most use cases we recommend using the online
   * workflow editor hosted on [paradym.id](https://paradym.id). The workflow editor will automatically guide
   * you through the process of creating and updating workflows.
   *
   * See [building a workflow](https://docs.paradym.id/workflow-builder/guides/building-a-workflow) for more information.
   * @param data The data for the request.
   * @param data.projectId
   * @param data.workflowId
   * @param data.requestBody
   * @returns Workflow Ok
   * @throws ApiError
   */
  public static updateWorkflowByYaml(data: UpdateWorkflowByYamlData): CancelablePromise<UpdateWorkflowByYamlResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/projects/{projectId}/workflows/{workflowId}/yaml',
      path: {
        projectId: data.projectId,
        workflowId: data.workflowId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }
}
