// This file is auto-generated by @hey-api/openapi-ts

export type FilterJsonApiResponse = {
  [key: string]: string
}

export type SearchJsonApiResponse = {
  [key: string]: string
}

export type Project = {
  id: string
  ownerId: string
  name: string
  createdAt: string
  updatedAt: string
  [key: string]: unknown | string
}

export type JsonApiResponse_Project_Array_ = {
  data: Array<Project>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type JsonObject = {
  [key: string]: JsonValue
}

export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

export type JsonArray = Array<JsonValue>

export type WorkflowAction = {
  attributes: JsonObject
  [key: string]: unknown | JsonObject
}

export type WorkflowStatus = 'draft' | 'published'

export type WorkflowTrigger = {
  [key: string]: unknown
}

export type Workflow = {
  actions: Array<WorkflowAction>
  input: JsonObject
  status: WorkflowStatus
  trigger: WorkflowTrigger
  [key: string]: unknown | WorkflowAction | JsonObject | WorkflowStatus | WorkflowTrigger
}

export type ParadymErrorCode = 2000 | 2001 | 2002 | 2003 | 2004 | 2005 | 2006 | 2007 | 2008 | 2009 | 2010

export type Detail = {
  message: string
  [key: string]: (unknown | string) | undefined
}

/**
 * Code is used as the error name. This name is mapped to an error title to the user.
 * Message is used as the error description.
 * Details contains a list of error details. These are rendered as a bullet list to the user.
 */
export type ParadymError = {
  details: Array<Detail>
  message: string
  code: ParadymErrorCode | number
}

export type JsonApiResponse_Workflow_Array_ = {
  data: Array<Workflow>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type SaveWorkflowYaml =
  | {
      yaml: string
    }
  | string

export type WorkflowEditor = {
  [key: string]: unknown
}

export type UpdateWorkflowYaml =
  | {
      yaml: string
    }
  | string

export type WorkflowExecutionStatus = 'created' | 'running' | 'waitingForTrigger' | 'completed' | 'failed' | 'canceled'

export type WorkflowExecution = {
  status: WorkflowExecutionStatus
  [key: string]: unknown | WorkflowExecutionStatus
}

export type ExecuteWorkflowBody = {
  /**
   * The ID of the workflow to execute. The workflow must have the `api` trigger type.
   */
  workflowId: string
  /**
   * properties that should be passed to the workflow as input. Must match the structure
   * as defined in the `input` field of the workflow.
   */
  input: JsonObject
}

export type JsonApiResponse_WorkflowExecution_Array_ = {
  data: Array<WorkflowExecution>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type JsonApiParameterErrorFormat = {
  source: {
    parameter: string
  }
  detail: string
  title: string
  status: string
}

export type JsonApiErrorJson = {
  errors: Array<JsonApiParameterErrorFormat>
  [key: string]: unknown | JsonApiParameterErrorFormat
}

export type WebhookSubscription = {
  [key: string]: unknown
}

export type JsonApiResponse_WebhookSubscription_Array_ = {
  data: Array<WebhookSubscription>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type WebhookSubscriptionWithSecret = {
  [key: string]: unknown
}

export type OpenId4VcVerificationStatus = 'failed' | 'requested' | 'verified'

export type CredentialFormat = 'sd-jwt-vc'

export type OpenId4VcVerificationCredential = {
  format: CredentialFormat
  presentedAttributes: JsonObject
  raw: string
  isValid: boolean
  issuer: string
  holder: string
  [key: string]: unknown | CredentialFormat | JsonObject | string | boolean
}

export type BaseError = {
  details: Array<unknown>
  message: string
  code: number
}

export type OpenId4VcVerification = {
  id: string
  createdAt: string
  updatedAt: string
  authorizationRequestUri: string
  presentationTemplateId: string
  status: OpenId4VcVerificationStatus
  credentials: Array<OpenId4VcVerificationCredential>
  error?: BaseError | null
  [key: string]: unknown | string | OpenId4VcVerificationStatus | OpenId4VcVerificationCredential
}

export type JsonApiResponse_OpenId4VcVerification_Array_ = {
  data: Array<OpenId4VcVerification>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type OpenId4VcRequestPresentationBody = {
  presentationTemplateId: string
}

export type OpenId4VcIssuanceStatus = 'completed' | 'failed' | 'offered' | 'partiallyIssued'

export type OpenId4VcIssuanceCredentialStatus = 'offered' | 'issued'

export type OpenId4VcIssuanceCredential = {
  credentialTemplateId: string
  status: OpenId4VcIssuanceCredentialStatus
  [key: string]: unknown | string | OpenId4VcIssuanceCredentialStatus
}

export type OpenId4VcIssuance = {
  id: string
  createdAt: string
  updatedAt: string
  /**
   * [BaseErrorNullable]
   */
  error: BaseError
  offerUri: string
  status: OpenId4VcIssuanceStatus
  credentials: Array<OpenId4VcIssuanceCredential>
  [key: string]: unknown | string | BaseError | OpenId4VcIssuanceStatus | OpenId4VcIssuanceCredential
}

export type JsonApiResponse_OpenId4VcIssuance_Array_ = {
  data: Array<OpenId4VcIssuance>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type OpenId4VcIssuanceBodyAttributes = {
  [key: string]: string | boolean | number
}

export type CreateOpenId4VcIssuanceOfferBody = {
  credentials: Array<{
    attributes: OpenId4VcIssuanceBodyAttributes
    credentialTemplateId: string
  }>
}

export type ProjectProfile = {
  id: string
  did: string
  displayName: string
  logo: {
    altText: string | null
    url: string
  } | null
  [key: string]: unknown | string
}

export type ApiProjectProfileInput = {
  logo?: {
    altText?: string
    url: string
  }
  displayName: string
}

export type ProjectMember = {
  id: string
  createdAt: string
  updatedAt: string
  isOwner: boolean
  user: {
    email: string
  }
  project: {
    name: string
  }
  [key: string]: unknown | string | boolean
}

export type JsonApiResponse_ProjectMember_Array_ = {
  data: Array<ProjectMember>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

/**
 * Construct a type with a set of properties K of type T
 */
export type Record_string_never_ = unknown

/**
 * An empty JSON Object
 */
export type EmptyJsonObject = Record_string_never_

export type PresentationTemplateCredentialAttributes = {
  [key: string]:
    | {
        value?: string
        type: 'string'
      }
    | {
        maximum?: number
        minimum?: number
        value?: number
        type: 'number'
      }
    | {
        value?: boolean
        type: 'boolean'
      }
    | {
        value?: string
        type: 'date'
      }
    | EmptyJsonObject
}

export type PresentationTemplateCredential = {
  attributes: PresentationTemplateCredentialAttributes
  type: string
  format: 'sd-jwt-vc'
  name?: string
  description?: string
}

export type format = 'sd-jwt-vc'

export type PresentationTemplate = {
  id: string
  name: string
  createdAt: string
  updatedAt: string
  description: string
  credentials: Array<PresentationTemplateCredential>
  [key: string]: unknown | string | PresentationTemplateCredential
}

export type JsonApiResponse_PresentationTemplate_Array_ = {
  data: Array<PresentationTemplate>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type PresentationTemplateInput = {
  credentials: Array<PresentationTemplateCredential>
  description: string
  name: string
  [key: string]: unknown | PresentationTemplateCredential | string
}

export type Mediator = {
  [key: string]: unknown
}

export type JsonApiResponse_Mediator_Array_ = {
  data: Array<Mediator>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type MediatorAllowedConnection = {
  [key: string]: unknown
}

export type JsonApiResponse_MediatorAllowedConnection_Array_ = {
  data: Array<MediatorAllowedConnection>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type SdJwtCredentialTemplate = {
  id: string
  name: string
  createdAt: string
  updatedAt: string
  type: string
  description: string
  revocable: boolean
  format: 'sd-jwt-vc'
  attributes: {
    [key: string]: {
      alwaysDisclosed?: boolean
      required?: boolean
      description?: string
      name?: string
      type: 'string' | 'number' | 'boolean' | 'date'
    }
  }
  validFrom?:
    | string
    | {
        future: {
          days?: number
          months?: number
          years?: number
        }
      }
  validUntil?:
    | string
    | {
        future: {
          days?: number
          months?: number
          years?: number
        }
        start: 'issuance' | 'validFrom'
      }
  background?: {
    url?: string
    color?: string
  }
  text?: {
    color?: string
  }
  [key: string]: unknown | string | boolean
}

export type start = 'issuance' | 'validFrom'

export type JsonApiResponse_SdJwtCredentialTemplate_Array_ = {
  data: Array<SdJwtCredentialTemplate>
  meta: {
    next?: string
    prev?: string
    sort?: Array<{
      [key: string]: string | undefined
    }>
    search?: SearchJsonApiResponse
    filter?: FilterJsonApiResponse
    page: {
      maxSize: string
      after?: string
      before?: string
      size: string
    }
    [key: string]: (unknown | string | SearchJsonApiResponse | FilterJsonApiResponse) | undefined
  }
}

export type SdJwtCredentialTemplateInput = {
  attributes: {
    [key: string]: {
      alwaysDisclosed?: boolean
      required?: boolean
      description?: string
      name?: string
      type: 'string' | 'number' | 'boolean' | 'date'
    }
  }
  revocable?: boolean
  type: string
  validUntil?:
    | string
    | {
        future: {
          days?: number
          months?: number
          years?: number
        }
        start: 'issuance' | 'validFrom'
      }
  validFrom?:
    | string
    | {
        future: {
          days?: number
          months?: number
          years?: number
        }
      }
  text?: {
    color?: string
  }
  background?: {
    url?: string
    color?: string
  }
  description?: string
  name: string
  [key: string]: unknown | boolean | string
}

export type SdJwtCredentialTemplateUpdateInput = {
  name: string
  attributes: {
    [key: string]: {
      alwaysDisclosed?: boolean
      required?: boolean
      description?: string
      name?: string
      type: 'string' | 'number' | 'boolean' | 'date'
    }
  }
  description?: string
  background?: {
    url?: string
    color?: string
  }
  text?: {
    color?: string
  }
  validFrom?:
    | string
    | {
        future: {
          days?: number
          months?: number
          years?: number
        }
      }
  validUntil?:
    | string
    | {
        future: {
          days?: number
          months?: number
          years?: number
        }
        start: 'validFrom' | 'issuance'
      }
  revocable?: boolean
  [key: string]: unknown | string | boolean
}

export type CredentialTemplateJsonSchema = {
  additionalProperties: boolean
  required: Array<string>
  properties: {
    [key: string]: {
      description: string
      title: string
      type: string
    }
  }
  type: 'object'
  title: string
  $id: string
  $schema: 'https://json-schema.org/draft-07/schema#'
}

export type type = 'object'

export type $schema = 'https://json-schema.org/draft-07/schema#'

export type GetAllProjectsResponse = JsonApiResponse_Project_Array_

export type CreateProjectData = {
  requestBody: {
    name: string
  }
}

export type CreateProjectResponse = Project

export type GetAllProjectMembersData = {
  projectId: string
}

export type GetAllProjectMembersResponse = JsonApiResponse_ProjectMember_Array_

export type AddProjectMemberData = {
  projectId: string
  requestBody: {
    email: string
  }
}

export type AddProjectMemberResponse = void

export type RemoveProjectMemberData = {
  projectId: string
  requestBody: {
    email: string
  }
}

export type RemoveProjectMemberResponse = void

export type GetWorkflowData = {
  projectId: string
  workflowId: string
}

export type GetWorkflowResponse = Workflow

export type DeleteWorkflowData = {
  projectId: string
  workflowId: string
}

export type DeleteWorkflowResponse = void

export type PublishWorkflowData = {
  projectId: string
  workflowId: string
}

export type PublishWorkflowResponse = Workflow

export type UnpublishWorkflowData = {
  projectId: string
  requestBody: {
    forceCancelExecutions?: boolean
  }
  workflowId: string
}

export type UnpublishWorkflowResponse = Workflow

export type GetAllWorkflowsData = {
  projectId: string
}

export type GetAllWorkflowsResponse = JsonApiResponse_Workflow_Array_

export type ExecuteWorkflowData = {
  projectId: string
  requestBody: ExecuteWorkflowBody
}

export type ExecuteWorkflowResponse = WorkflowExecution

export type GetAllExecutionsPaginatedData = {
  projectId: string
}

export type GetAllExecutionsPaginatedResponse = JsonApiResponse_WorkflowExecution_Array_

export type GetExecutionData = {
  projectId: string
  workflowExecutionId: string
}

export type GetExecutionResponse = WorkflowExecution

export type GetWebhooksData = {
  projectId: string
}

export type GetWebhooksResponse = JsonApiResponse_WebhookSubscription_Array_

export type CreateWebhookData = {
  projectId: string
  requestBody: {
    name: string
    url: string
  }
}

export type CreateWebhookResponse = WebhookSubscriptionWithSecret

export type DeleteWebhookData = {
  projectId: string
  webhookId: string
}

export type DeleteWebhookResponse = void

export type GetAllOpenId4VcVerificationSessionsData = {
  projectId: string
}

export type GetAllOpenId4VcVerificationSessionsResponse = JsonApiResponse_OpenId4VcVerification_Array_

export type GetOpenId4VcVerificationSessionByIdData = {
  projectId: string
  verificationSessionId: string
}

export type GetOpenId4VcVerificationSessionByIdResponse = OpenId4VcVerification

export type CreateVerificationRequestData = {
  projectId: string
  requestBody: OpenId4VcRequestPresentationBody
}

export type CreateVerificationRequestResponse = OpenId4VcVerification

export type GetAllOpenId4VcIssuanceSessionsData = {
  projectId: string
}

export type GetAllOpenId4VcIssuanceSessionsResponse = JsonApiResponse_OpenId4VcIssuance_Array_

export type GetOpenId4VcIssuanceSessionByIdData = {
  issuanceSessionId: string
  projectId: string
}

export type GetOpenId4VcIssuanceSessionByIdResponse = OpenId4VcIssuance

export type CreateIssuanceOfferData = {
  projectId: string
  requestBody: CreateOpenId4VcIssuanceOfferBody
}

export type CreateIssuanceOfferResponse = OpenId4VcIssuance

export type GetProfileData = {
  projectId: string
}

export type GetProfileResponse = ProjectProfile

export type UpdateProfileData = {
  projectId: string
  requestBody: ApiProjectProfileInput
}

export type UpdateProfileResponse = ProjectProfile

export type GetAllPresentationTemplatesPaginatedData = {
  projectId: string
}

export type GetAllPresentationTemplatesPaginatedResponse = JsonApiResponse_PresentationTemplate_Array_

export type CreatePresentationTemplateData = {
  projectId: string
  requestBody: PresentationTemplateInput
}

export type CreatePresentationTemplateResponse = PresentationTemplate

export type GetPresentationTemplateData = {
  presentationTemplateId: string
  projectId: string
}

export type GetPresentationTemplateResponse = PresentationTemplate

export type UpdatePresentationTemplateData = {
  presentationTemplateId: string
  projectId: string
  requestBody: PresentationTemplateInput
}

export type UpdatePresentationTemplateResponse = PresentationTemplate

export type ArchivePresentationTemplateData = {
  presentationTemplateId: string
  projectId: string
}

export type ArchivePresentationTemplateResponse = void

export type GetAllMediatorsResponse = JsonApiResponse_Mediator_Array_

export type GetMediatorByIdData = {
  mediatorId: string
}

export type GetMediatorByIdResponse = Mediator

export type GetAllowedConnectionsPaginatedData = {
  mediatorId: string
}

export type GetAllowedConnectionsPaginatedResponse = JsonApiResponse_MediatorAllowedConnection_Array_

export type AllowPublicKeyData = {
  mediatorId: string
  requestBody: {
    /**
     * - The public key of the wallet that wants to connect to the mediator.
     */
    publicKeyBase58: string
    /**
     * - A custom reference to something in your application so you can identify it later.
     */
    customReference?: string
  }
}

export type AllowPublicKeyResponse = MediatorAllowedConnection

export type RevokePublicKeyAllowanceData = {
  mediatorId: string
  publicKeyId: string
}

export type RevokePublicKeyAllowanceResponse = void

export type GetAllSdJwtVcTemplatesData = {
  projectId: string
}

export type GetAllSdJwtVcTemplatesResponse = JsonApiResponse_SdJwtCredentialTemplate_Array_

export type CreateSdJwtVcTemplateData = {
  projectId: string
  requestBody: SdJwtCredentialTemplateInput
}

export type CreateSdJwtVcTemplateResponse = SdJwtCredentialTemplate

export type UpdateSdJwtVcTemplateData = {
  credentialTemplateId: string
  projectId: string
  requestBody: SdJwtCredentialTemplateUpdateInput
}

export type UpdateSdJwtVcTemplateResponse = SdJwtCredentialTemplate

export type GetSdJwtVcTemplateData = {
  credentialTemplateId: string
  projectId: string
}

export type GetSdJwtVcTemplateResponse = SdJwtCredentialTemplate

export type ArchiveSdJwtVcTemplateData = {
  credentialTemplateId: string
  projectId: string
}

export type ArchiveSdJwtVcTemplateResponse = void

export type GetSdJwtVcTemplateJsonSchemaData = {
  credentialTemplateId: string
  projectId: string
}

export type GetSdJwtVcTemplateJsonSchemaResponse = CredentialTemplateJsonSchema

export type CreateWorkflowBasedOnYamlData = {
  projectId: string
  requestBody: SaveWorkflowYaml
}

export type CreateWorkflowBasedOnYamlResponse = Workflow

export type GetConceptData = {
  projectId: string
  workflowId: string
}

export type GetConceptResponse = WorkflowEditor

export type UpdateWorkflowByYamlData = {
  projectId: string
  requestBody: UpdateWorkflowYaml
  workflowId: string
}

export type UpdateWorkflowByYamlResponse = Workflow

export type $OpenApiTs = {
  '/v1/projects': {
    get: {
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_Project_Array_
      }
    }
    post: {
      req: CreateProjectData
      res: {
        /**
         * Ok
         */
        200: Project
      }
    }
  }
  '/v1/projects/{projectId}/members': {
    get: {
      req: GetAllProjectMembersData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_ProjectMember_Array_
      }
    }
  }
  '/v1/projects/{projectId}/members/add': {
    post: {
      req: AddProjectMemberData
      res: {
        /**
         * No content
         */
        204: void
      }
    }
  }
  '/v1/projects/{projectId}/members/remove': {
    post: {
      req: RemoveProjectMemberData
      res: {
        /**
         * No content
         */
        204: void
      }
    }
  }
  '/v1/projects/{projectId}/workflows/{workflowId}': {
    get: {
      req: GetWorkflowData
      res: {
        /**
         * Ok
         */
        200: Workflow
        /**
         * Workflow not found
         */
        404: ParadymError
      }
    }
    delete: {
      req: DeleteWorkflowData
      res: {
        /**
         * Deleted
         */
        204: void
        /**
         * Not found error
         */
        404: unknown
      }
    }
  }
  '/v1/projects/{projectId}/workflows/{workflowId}/publish': {
    post: {
      req: PublishWorkflowData
      res: {
        /**
         * Ok
         */
        200: Workflow
      }
    }
  }
  '/v1/projects/{projectId}/workflows/{workflowId}/unpublish': {
    post: {
      req: UnpublishWorkflowData
      res: {
        /**
         * Ok
         */
        200: Workflow
      }
    }
  }
  '/v1/projects/{projectId}/workflows': {
    get: {
      req: GetAllWorkflowsData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_Workflow_Array_
      }
    }
  }
  '/v1/projects/{projectId}/executions': {
    post: {
      req: ExecuteWorkflowData
      res: {
        /**
         * Ok
         */
        200: WorkflowExecution
        /**
         * WorkflowExecution failed
         */
        400: WorkflowExecution
        /**
         * Workflow not found
         */
        404: ParadymError
      }
    }
    get: {
      req: GetAllExecutionsPaginatedData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_WorkflowExecution_Array_
        /**
         * Error parsing request
         */
        400: JsonApiErrorJson
      }
    }
  }
  '/v1/projects/{projectId}/executions/{workflowExecutionId}': {
    get: {
      req: GetExecutionData
      res: {
        /**
         * Ok
         */
        200: WorkflowExecution
        /**
         * WorkflowExecution not found
         */
        404: ParadymError
      }
    }
  }
  '/v1/projects/{projectId}/webhooks': {
    get: {
      req: GetWebhooksData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_WebhookSubscription_Array_
      }
    }
    post: {
      req: CreateWebhookData
      res: {
        /**
         * Ok
         */
        200: WebhookSubscriptionWithSecret
      }
    }
  }
  '/v1/projects/{projectId}/webhooks/{webhookId}': {
    delete: {
      req: DeleteWebhookData
      res: {
        /**
         * Deleted
         */
        204: void
        /**
         * Not found error
         */
        404: unknown
      }
    }
  }
  '/v1/projects/{projectId}/openid4vc/verification': {
    get: {
      req: GetAllOpenId4VcVerificationSessionsData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_OpenId4VcVerification_Array_
      }
    }
  }
  '/v1/projects/{projectId}/openid4vc/verification/{verificationSessionId}': {
    get: {
      req: GetOpenId4VcVerificationSessionByIdData
      res: {
        /**
         * Ok
         */
        200: OpenId4VcVerification
        /**
         * OpenId4Vc Verification not found
         */
        404: ParadymError
      }
    }
  }
  '/v1/projects/{projectId}/openid4vc/verification/request': {
    post: {
      req: CreateVerificationRequestData
      res: {
        /**
         * Ok
         */
        200: OpenId4VcVerification
        /**
         * Presentation Template not found
         */
        404: ParadymError
      }
    }
  }
  '/v1/projects/{projectId}/openid4vc/issuance': {
    get: {
      req: GetAllOpenId4VcIssuanceSessionsData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_OpenId4VcIssuance_Array_
      }
    }
  }
  '/v1/projects/{projectId}/openid4vc/issuance/{issuanceSessionId}': {
    get: {
      req: GetOpenId4VcIssuanceSessionByIdData
      res: {
        /**
         * Ok
         */
        200: OpenId4VcIssuance
        /**
         * OpenId4Vc Issuance Session not found
         */
        404: ParadymError
      }
    }
  }
  '/v1/projects/{projectId}/openid4vc/issuance/offer': {
    post: {
      req: CreateIssuanceOfferData
      res: {
        /**
         * Ok
         */
        200: OpenId4VcIssuance
        /**
         * Credential Template(s) not found
         */
        404: ParadymError
      }
    }
  }
  '/v1/projects/{projectId}/profiles/default': {
    get: {
      req: GetProfileData
      res: {
        /**
         * Ok
         */
        200: ProjectProfile
      }
    }
    put: {
      req: UpdateProfileData
      res: {
        /**
         * Ok
         */
        200: ProjectProfile
      }
    }
  }
  '/v1/projects/{projectId}/templates/presentations': {
    get: {
      req: GetAllPresentationTemplatesPaginatedData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_PresentationTemplate_Array_
      }
    }
    post: {
      req: CreatePresentationTemplateData
      res: {
        /**
         * Ok
         */
        200: PresentationTemplate
      }
    }
  }
  '/v1/projects/{projectId}/templates/presentations/{presentationTemplateId}': {
    get: {
      req: GetPresentationTemplateData
      res: {
        /**
         * Ok
         */
        200: PresentationTemplate
      }
    }
    put: {
      req: UpdatePresentationTemplateData
      res: {
        /**
         * Ok
         */
        200: PresentationTemplate
      }
    }
    delete: {
      req: ArchivePresentationTemplateData
      res: {
        /**
         * Deleted
         */
        204: void
        /**
         * Not found error
         */
        404: unknown
      }
    }
  }
  '/v1/mediators': {
    get: {
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_Mediator_Array_
        /**
         * Error parsing request
         */
        400: JsonApiErrorJson
      }
    }
  }
  '/v1/mediators/{mediatorId}': {
    get: {
      req: GetMediatorByIdData
      res: {
        /**
         * Ok
         */
        200: Mediator
      }
    }
  }
  '/v1/mediators/{mediatorId}/public-keys': {
    get: {
      req: GetAllowedConnectionsPaginatedData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_MediatorAllowedConnection_Array_
        /**
         * Error parsing request
         */
        400: JsonApiErrorJson
      }
    }
    post: {
      req: AllowPublicKeyData
      res: {
        /**
         * Ok
         */
        200: MediatorAllowedConnection
      }
    }
  }
  '/v1/mediators/{mediatorId}/public-keys/{publicKeyId}': {
    delete: {
      req: RevokePublicKeyAllowanceData
      res: {
        /**
         * Deleted
         */
        204: void
        /**
         * Not found error
         */
        404: unknown
      }
    }
  }
  '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc': {
    get: {
      req: GetAllSdJwtVcTemplatesData
      res: {
        /**
         * Ok
         */
        200: JsonApiResponse_SdJwtCredentialTemplate_Array_
      }
    }
    post: {
      req: CreateSdJwtVcTemplateData
      res: {
        /**
         * Ok
         */
        200: SdJwtCredentialTemplate
      }
    }
  }
  '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc/{credentialTemplateId}': {
    put: {
      req: UpdateSdJwtVcTemplateData
      res: {
        /**
         * Ok
         */
        200: SdJwtCredentialTemplate
      }
    }
    get: {
      req: GetSdJwtVcTemplateData
      res: {
        /**
         * Ok
         */
        200: SdJwtCredentialTemplate
      }
    }
    delete: {
      req: ArchiveSdJwtVcTemplateData
      res: {
        /**
         * Archived
         */
        204: void
        /**
         * Not found error
         */
        404: unknown
      }
    }
  }
  '/v1/projects/{projectId}/templates/credentials/sd-jwt-vc/{credentialTemplateId}/json-schema': {
    get: {
      req: GetSdJwtVcTemplateJsonSchemaData
      res: {
        /**
         * Ok
         */
        200: CredentialTemplateJsonSchema
      }
    }
  }
  '/v1/projects/{projectId}/workflows/yaml': {
    post: {
      req: CreateWorkflowBasedOnYamlData
      res: {
        /**
         * Ok
         */
        200: Workflow
      }
    }
  }
  '/v1/projects/{projectId}/workflows/{workflowId}/yaml': {
    get: {
      req: GetConceptData
      res: {
        /**
         * Ok
         */
        200: WorkflowEditor
      }
    }
    put: {
      req: UpdateWorkflowByYamlData
      res: {
        /**
         * Ok
         */
        200: Workflow
      }
    }
  }
}
