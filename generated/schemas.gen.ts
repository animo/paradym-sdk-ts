// This file is auto-generated by @hey-api/openapi-ts

export const $FilterJsonApiResponse = {
  type: 'object',
  additionalProperties: {
    type: 'string',
    additionalProperties: false,
  },
} as const

export const $SearchJsonApiResponse = {
  type: 'object',
  additionalProperties: {
    type: 'string',
    additionalProperties: false,
  },
} as const

export const $Project = {
  properties: {
    id: {
      type: 'string',
    },
    ownerId: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
  },
  required: ['id', 'ownerId', 'name', 'createdAt', 'updatedAt'],
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_Project_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/Project',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $JsonObject = {
  additionalProperties: {
    $ref: '#/components/schemas/JsonValue',
    additionalProperties: false,
  },
  type: 'object',
} as const

export const $JsonValue = {
  anyOf: [
    {
      type: 'string',
    },
    {
      type: 'number',
      format: 'double',
    },
    {
      type: 'boolean',
    },
    {
      $ref: '#/components/schemas/JsonObject',
    },
    {
      $ref: '#/components/schemas/JsonArray',
    },
  ],
  nullable: true,
} as const

export const $JsonArray = {
  items: {
    $ref: '#/components/schemas/JsonValue',
  },
  type: 'array',
} as const

export const $WorkflowAction = {
  properties: {
    attributes: {
      $ref: '#/components/schemas/JsonObject',
    },
  },
  required: ['attributes'],
  type: 'object',
  additionalProperties: true,
} as const

export const $WorkflowStatus = {
  type: 'string',
  enum: ['draft', 'published'],
  nullable: false,
} as const

export const $WorkflowTrigger = {
  type: 'object',
  additionalProperties: true,
} as const

export const $Workflow = {
  properties: {
    actions: {
      items: {
        $ref: '#/components/schemas/WorkflowAction',
      },
      type: 'array',
    },
    input: {
      $ref: '#/components/schemas/JsonObject',
    },
    status: {
      $ref: '#/components/schemas/WorkflowStatus',
    },
    trigger: {
      $ref: '#/components/schemas/WorkflowTrigger',
    },
  },
  required: ['actions', 'input', 'status', 'trigger'],
  type: 'object',
  additionalProperties: true,
} as const

export const $ParadymErrorCode = {
  enum: [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010],
  type: 'number',
} as const

export const $Detail = {
  properties: {
    message: {
      type: 'string',
    },
  },
  additionalProperties: {},
  required: ['message'],
  type: 'object',
} as const

export const $ParadymError = {
  properties: {
    details: {
      items: {
        $ref: '#/components/schemas/Detail',
      },
      type: 'array',
    },
    message: {
      type: 'string',
    },
    code: {
      anyOf: [
        {
          $ref: '#/components/schemas/ParadymErrorCode',
        },
        {
          type: 'number',
          format: 'double',
        },
      ],
    },
  },
  required: ['details', 'message', 'code'],
  type: 'object',
  description: `Code is used as the error name. This name is mapped to an error title to the user.
Message is used as the error description.
Details contains a list of error details. These are rendered as a bullet list to the user.`,
} as const

export const $JsonApiResponse_Workflow_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/Workflow',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $SaveWorkflowYaml = {
  anyOf: [
    {
      properties: {
        yaml: {
          type: 'string',
        },
      },
      required: ['yaml'],
      type: 'object',
    },
    {
      type: 'string',
    },
  ],
} as const

export const $WorkflowEditor = {
  type: 'object',
  additionalProperties: true,
} as const

export const $UpdateWorkflowYaml = {
  anyOf: [
    {
      properties: {
        yaml: {
          type: 'string',
        },
      },
      required: ['yaml'],
      type: 'object',
    },
    {
      type: 'string',
    },
  ],
} as const

export const $WorkflowExecutionStatus = {
  type: 'string',
  enum: ['created', 'running', 'waitingForTrigger', 'completed', 'failed', 'canceled'],
  nullable: false,
} as const

export const $WorkflowExecution = {
  properties: {
    status: {
      $ref: '#/components/schemas/WorkflowExecutionStatus',
    },
  },
  required: ['status'],
  type: 'object',
  additionalProperties: true,
} as const

export const $ExecuteWorkflowBody = {
  properties: {
    workflowId: {
      type: 'string',
      description: 'The ID of the workflow to execute. The workflow must have the `api` trigger type.',
    },
    input: {
      $ref: '#/components/schemas/JsonObject',
      description: `properties that should be passed to the workflow as input. Must match the structure
as defined in the \`input\` field of the workflow.`,
    },
  },
  required: ['workflowId', 'input'],
  type: 'object',
} as const

export const $JsonApiResponse_WorkflowExecution_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/WorkflowExecution',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $JsonApiParameterErrorFormat = {
  properties: {
    source: {
      properties: {
        parameter: {
          type: 'string',
        },
      },
      required: ['parameter'],
      type: 'object',
    },
    detail: {
      type: 'string',
    },
    title: {
      type: 'string',
    },
    status: {
      type: 'string',
    },
  },
  required: ['source', 'detail', 'title', 'status'],
  type: 'object',
} as const

export const $JsonApiErrorJson = {
  properties: {
    errors: {
      items: {
        $ref: '#/components/schemas/JsonApiParameterErrorFormat',
      },
      type: 'array',
    },
  },
  required: ['errors'],
  type: 'object',
  additionalProperties: true,
} as const

export const $WebhookSubscription = {
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_WebhookSubscription_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/WebhookSubscription',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $WebhookSubscriptionWithSecret = {
  type: 'object',
  additionalProperties: true,
} as const

export const $OpenId4VcVerificationStatus = {
  type: 'string',
  enum: ['failed', 'requested', 'verified'],
  nullable: false,
} as const

export const $CredentialFormat = {
  type: 'string',
  enum: ['sd-jwt-vc'],
  nullable: false,
} as const

export const $OpenId4VcVerificationCredential = {
  properties: {
    format: {
      $ref: '#/components/schemas/CredentialFormat',
    },
    presentedAttributes: {
      $ref: '#/components/schemas/JsonObject',
    },
    raw: {
      type: 'string',
    },
    isValid: {
      type: 'boolean',
    },
    issuer: {
      type: 'string',
    },
    holder: {
      type: 'string',
    },
  },
  required: ['format', 'presentedAttributes', 'raw', 'isValid', 'issuer', 'holder'],
  type: 'object',
  additionalProperties: true,
} as const

export const $BaseError = {
  properties: {
    details: {
      items: {},
      type: 'array',
    },
    message: {
      type: 'string',
    },
    code: {
      type: 'number',
      format: 'double',
    },
  },
  required: ['details', 'message', 'code'],
  type: 'object',
} as const

export const $OpenId4VcVerification = {
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    authorizationRequestUri: {
      type: 'string',
    },
    presentationTemplateId: {
      type: 'string',
    },
    status: {
      $ref: '#/components/schemas/OpenId4VcVerificationStatus',
    },
    credentials: {
      items: {
        $ref: '#/components/schemas/OpenId4VcVerificationCredential',
      },
      type: 'array',
    },
    error: {
      allOf: [
        {
          $ref: '#/components/schemas/BaseError',
        },
      ],
      nullable: true,
    },
  },
  required: [
    'id',
    'createdAt',
    'updatedAt',
    'authorizationRequestUri',
    'presentationTemplateId',
    'status',
    'credentials',
  ],
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_OpenId4VcVerification_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/OpenId4VcVerification',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $OpenId4VcRequestPresentationBody = {
  properties: {
    presentationTemplateId: {
      type: 'string',
    },
  },
  required: ['presentationTemplateId'],
  type: 'object',
} as const

export const $OpenId4VcIssuanceStatus = {
  type: 'string',
  enum: ['completed', 'failed', 'offered', 'partiallyIssued'],
  nullable: false,
} as const

export const $OpenId4VcIssuanceCredentialStatus = {
  type: 'string',
  enum: ['offered', 'issued'],
  nullable: false,
} as const

export const $OpenId4VcIssuanceCredential = {
  properties: {
    credentialTemplateId: {
      type: 'string',
    },
    status: {
      $ref: '#/components/schemas/OpenId4VcIssuanceCredentialStatus',
    },
  },
  required: ['credentialTemplateId', 'status'],
  type: 'object',
  additionalProperties: true,
} as const

export const $OpenId4VcIssuance = {
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    error: {
      $ref: '#/components/schemas/BaseError',
      description: '[BaseErrorNullable]',
    },
    offerUri: {
      type: 'string',
    },
    status: {
      $ref: '#/components/schemas/OpenId4VcIssuanceStatus',
    },
    credentials: {
      items: {
        $ref: '#/components/schemas/OpenId4VcIssuanceCredential',
      },
      type: 'array',
    },
  },
  required: ['id', 'createdAt', 'updatedAt', 'error', 'offerUri', 'status', 'credentials'],
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_OpenId4VcIssuance_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/OpenId4VcIssuance',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $OpenId4VcIssuanceBodyAttributes = {
  type: 'object',
  additionalProperties: {
    anyOf: [
      {
        type: 'string',
      },
      {
        type: 'boolean',
      },
      {
        type: 'number',
        format: 'double',
      },
    ],
    additionalProperties: false,
  },
} as const

export const $CreateOpenId4VcIssuanceOfferBody = {
  properties: {
    credentials: {
      items: {
        properties: {
          attributes: {
            $ref: '#/components/schemas/OpenId4VcIssuanceBodyAttributes',
          },
          credentialTemplateId: {
            type: 'string',
          },
        },
        required: ['attributes', 'credentialTemplateId'],
        type: 'object',
      },
      type: 'array',
    },
  },
  required: ['credentials'],
  type: 'object',
} as const

export const $ProjectProfile = {
  properties: {
    id: {
      type: 'string',
    },
    did: {
      type: 'string',
    },
    displayName: {
      type: 'string',
    },
    logo: {
      properties: {
        altText: {
          type: 'string',
          nullable: true,
        },
        url: {
          type: 'string',
        },
      },
      required: ['altText', 'url'],
      type: 'object',
      nullable: true,
    },
  },
  required: ['id', 'did', 'displayName', 'logo'],
  type: 'object',
  additionalProperties: true,
} as const

export const $ApiProjectProfileInput = {
  properties: {
    logo: {
      properties: {
        altText: {
          type: 'string',
        },
        url: {
          type: 'string',
        },
      },
      required: ['url'],
      type: 'object',
    },
    displayName: {
      type: 'string',
    },
  },
  required: ['displayName'],
  type: 'object',
} as const

export const $ProjectMember = {
  properties: {
    id: {
      type: 'string',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    isOwner: {
      type: 'boolean',
    },
    user: {
      properties: {
        email: {
          type: 'string',
        },
      },
      required: ['email'],
      type: 'object',
    },
    project: {
      properties: {
        name: {
          type: 'string',
        },
      },
      required: ['name'],
      type: 'object',
    },
  },
  required: ['id', 'createdAt', 'updatedAt', 'isOwner', 'user', 'project'],
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_ProjectMember_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/ProjectMember',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $Record_string_never_ = {
  properties: {},
  type: 'object',
  description: 'Construct a type with a set of properties K of type T',
} as const

export const $EmptyJsonObject = {
  $ref: '#/components/schemas/Record_string.never_',
  description: 'An empty JSON Object',
} as const

export const $PresentationTemplateCredentialAttributes = {
  additionalProperties: {
    anyOf: [
      {
        properties: {
          value: {
            type: 'string',
          },
          type: {
            type: 'string',
            enum: ['string'],
            nullable: false,
          },
        },
        required: ['type'],
        type: 'object',
      },
      {
        properties: {
          maximum: {
            type: 'number',
            format: 'double',
          },
          minimum: {
            type: 'number',
            format: 'double',
          },
          value: {
            type: 'number',
            format: 'double',
          },
          type: {
            type: 'string',
            enum: ['number'],
            nullable: false,
          },
        },
        required: ['type'],
        type: 'object',
      },
      {
        properties: {
          value: {
            type: 'boolean',
          },
          type: {
            type: 'string',
            enum: ['boolean'],
            nullable: false,
          },
        },
        required: ['type'],
        type: 'object',
      },
      {
        properties: {
          value: {
            type: 'string',
          },
          type: {
            type: 'string',
            enum: ['date'],
            nullable: false,
          },
        },
        required: ['type'],
        type: 'object',
      },
      {
        $ref: '#/components/schemas/EmptyJsonObject',
      },
    ],
    additionalProperties: false,
  },
  type: 'object',
} as const

export const $PresentationTemplateCredential = {
  properties: {
    attributes: {
      $ref: '#/components/schemas/PresentationTemplateCredentialAttributes',
    },
    type: {
      type: 'string',
    },
    format: {
      type: 'string',
      enum: ['sd-jwt-vc'],
      nullable: false,
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
  },
  required: ['attributes', 'type', 'format'],
  type: 'object',
} as const

export const $PresentationTemplate = {
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    description: {
      type: 'string',
    },
    credentials: {
      items: {
        $ref: '#/components/schemas/PresentationTemplateCredential',
      },
      type: 'array',
    },
  },
  required: ['id', 'name', 'createdAt', 'updatedAt', 'description', 'credentials'],
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_PresentationTemplate_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/PresentationTemplate',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $PresentationTemplateInput = {
  properties: {
    credentials: {
      items: {
        $ref: '#/components/schemas/PresentationTemplateCredential',
      },
      type: 'array',
    },
    description: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
  required: ['credentials', 'description', 'name'],
  type: 'object',
  additionalProperties: true,
  example: {
    name: 'My SD-JWT VC presentation template',
    description: 'This is a description',
    credentials: [
      {
        description: 'This is a description',
        name: 'My SD-JWT VC credential',
        format: 'sd-jwt-vc',
        type: 'https://metadata.paradym.id/types/28dc88-UniversityCard',
        attributes: {
          myAttribute1: {
            type: 'string',
            value: 'myValue',
          },
          myAttribute2: {
            type: 'number',
            minimum: 1,
            maximum: 10,
          },
          myAttribute3: {
            type: 'boolean',
            value: true,
          },
        },
      },
    ],
  },
} as const

export const $Mediator = {
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_Mediator_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/Mediator',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $MediatorAllowedConnection = {
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_MediatorAllowedConnection_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/MediatorAllowedConnection',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $SdJwtCredentialTemplate = {
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
    type: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    revocable: {
      type: 'boolean',
    },
    format: {
      type: 'string',
      enum: ['sd-jwt-vc'],
      nullable: false,
    },
    attributes: {
      additionalProperties: {
        properties: {
          alwaysDisclosed: {
            type: 'boolean',
          },
          required: {
            type: 'boolean',
          },
          description: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          type: {
            type: 'string',
            enum: ['string', 'number', 'boolean', 'date'],
          },
        },
        required: ['type'],
        type: 'object',
        additionalProperties: false,
      },
      type: 'object',
    },
    validFrom: {
      anyOf: [
        {
          type: 'string',
        },
        {
          properties: {
            future: {
              properties: {
                days: {
                  type: 'number',
                  format: 'double',
                },
                months: {
                  type: 'number',
                  format: 'double',
                },
                years: {
                  type: 'number',
                  format: 'double',
                },
              },
              type: 'object',
            },
          },
          required: ['future'],
          type: 'object',
        },
      ],
    },
    validUntil: {
      anyOf: [
        {
          type: 'string',
        },
        {
          properties: {
            future: {
              properties: {
                days: {
                  type: 'number',
                  format: 'double',
                },
                months: {
                  type: 'number',
                  format: 'double',
                },
                years: {
                  type: 'number',
                  format: 'double',
                },
              },
              type: 'object',
            },
            start: {
              type: 'string',
              enum: ['issuance', 'validFrom'],
            },
          },
          required: ['future', 'start'],
          type: 'object',
        },
      ],
    },
    background: {
      properties: {
        url: {
          type: 'string',
        },
        color: {
          type: 'string',
        },
      },
      type: 'object',
    },
    text: {
      properties: {
        color: {
          type: 'string',
        },
      },
      type: 'object',
    },
  },
  required: ['id', 'name', 'createdAt', 'updatedAt', 'type', 'description', 'revocable', 'format', 'attributes'],
  type: 'object',
  additionalProperties: true,
} as const

export const $JsonApiResponse_SdJwtCredentialTemplate_Array_ = {
  properties: {
    data: {
      items: {
        $ref: '#/components/schemas/SdJwtCredentialTemplate',
      },
      type: 'array',
    },
    meta: {
      properties: {
        next: {
          type: 'string',
        },
        prev: {
          type: 'string',
        },
        sort: {
          items: {
            properties: {},
            additionalProperties: {
              type: 'string',
              enum: ['asc', 'desc'],
            },
            type: 'object',
          },
          type: 'array',
        },
        search: {
          $ref: '#/components/schemas/SearchJsonApiResponse',
        },
        filter: {
          $ref: '#/components/schemas/FilterJsonApiResponse',
        },
        page: {
          properties: {
            maxSize: {
              type: 'string',
            },
            after: {
              type: 'string',
            },
            before: {
              type: 'string',
            },
            size: {
              type: 'string',
            },
          },
          required: ['maxSize', 'size'],
          type: 'object',
        },
      },
      additionalProperties: {},
      required: ['page'],
      type: 'object',
    },
  },
  required: ['data', 'meta'],
  type: 'object',
} as const

export const $SdJwtCredentialTemplateInput = {
  properties: {
    attributes: {
      additionalProperties: {
        properties: {
          alwaysDisclosed: {
            type: 'boolean',
          },
          required: {
            type: 'boolean',
          },
          description: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          type: {
            type: 'string',
            enum: ['string', 'number', 'boolean', 'date'],
          },
        },
        required: ['type'],
        type: 'object',
        additionalProperties: false,
      },
      type: 'object',
    },
    revocable: {
      type: 'boolean',
      enum: [false],
    },
    type: {
      type: 'string',
    },
    validUntil: {
      anyOf: [
        {
          type: 'string',
        },
        {
          properties: {
            future: {
              properties: {
                days: {
                  type: 'number',
                  format: 'double',
                },
                months: {
                  type: 'number',
                  format: 'double',
                },
                years: {
                  type: 'number',
                  format: 'double',
                },
              },
              type: 'object',
            },
            start: {
              type: 'string',
              enum: ['issuance', 'validFrom'],
            },
          },
          required: ['future', 'start'],
          type: 'object',
        },
      ],
    },
    validFrom: {
      anyOf: [
        {
          type: 'string',
        },
        {
          properties: {
            future: {
              properties: {
                days: {
                  type: 'number',
                  format: 'double',
                },
                months: {
                  type: 'number',
                  format: 'double',
                },
                years: {
                  type: 'number',
                  format: 'double',
                },
              },
              type: 'object',
            },
          },
          required: ['future'],
          type: 'object',
        },
      ],
    },
    text: {
      properties: {
        color: {
          type: 'string',
        },
      },
      type: 'object',
    },
    background: {
      properties: {
        url: {
          type: 'string',
        },
        color: {
          type: 'string',
        },
      },
      type: 'object',
    },
    description: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
  required: ['attributes', 'type', 'name'],
  type: 'object',
  additionalProperties: true,
  example: {
    name: 'My SD-JWT VC template',
    description: 'This is a description',
    background: {
      color: '#FFFFFF',
      url: 'https://example.com/image.png',
    },
    text: {
      color: '#000000',
    },
    validFrom: '2024-04-11',
    validUntil: {
      start: 'validFrom',
      future: {
        years: 5,
      },
    },
    type: 'UniversityCard',
    revocable: false,
    attributes: {
      myAttribute: {
        type: 'string',
        name: 'My attribute',
        description: 'This is a attribute',
        required: true,
        alwaysDisclosed: false,
      },
    },
  },
} as const

export const $SdJwtCredentialTemplateUpdateInput = {
  properties: {
    name: {
      type: 'string',
    },
    attributes: {
      additionalProperties: {
        properties: {
          alwaysDisclosed: {
            type: 'boolean',
          },
          required: {
            type: 'boolean',
          },
          description: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          type: {
            type: 'string',
            enum: ['string', 'number', 'boolean', 'date'],
          },
        },
        required: ['type'],
        type: 'object',
        additionalProperties: false,
      },
      type: 'object',
    },
    description: {
      type: 'string',
    },
    background: {
      properties: {
        url: {
          type: 'string',
        },
        color: {
          type: 'string',
        },
      },
      type: 'object',
    },
    text: {
      properties: {
        color: {
          type: 'string',
        },
      },
      type: 'object',
    },
    validFrom: {
      anyOf: [
        {
          type: 'string',
        },
        {
          properties: {
            future: {
              properties: {
                days: {
                  type: 'number',
                  format: 'double',
                },
                months: {
                  type: 'number',
                  format: 'double',
                },
                years: {
                  type: 'number',
                  format: 'double',
                },
              },
              type: 'object',
            },
          },
          required: ['future'],
          type: 'object',
        },
      ],
    },
    validUntil: {
      anyOf: [
        {
          type: 'string',
        },
        {
          properties: {
            future: {
              properties: {
                days: {
                  type: 'number',
                  format: 'double',
                },
                months: {
                  type: 'number',
                  format: 'double',
                },
                years: {
                  type: 'number',
                  format: 'double',
                },
              },
              type: 'object',
            },
            start: {
              type: 'string',
              enum: ['validFrom', 'issuance'],
            },
          },
          required: ['future', 'start'],
          type: 'object',
        },
      ],
    },
    revocable: {
      type: 'boolean',
      enum: [false],
      nullable: false,
    },
  },
  required: ['name', 'attributes'],
  type: 'object',
  additionalProperties: true,
} as const

export const $CredentialTemplateJsonSchema = {
  properties: {
    additionalProperties: {
      type: 'boolean',
      enum: [false],
      nullable: false,
    },
    required: {
      items: {
        type: 'string',
      },
      type: 'array',
    },
    properties: {
      additionalProperties: {
        properties: {
          description: {
            type: 'string',
          },
          title: {
            type: 'string',
          },
          type: {
            type: 'string',
          },
        },
        required: ['description', 'title', 'type'],
        type: 'object',
        additionalProperties: false,
      },
      type: 'object',
    },
    type: {
      type: 'string',
      enum: ['object'],
      nullable: false,
    },
    title: {
      type: 'string',
    },
    $id: {
      type: 'string',
    },
    $schema: {
      type: 'string',
      enum: ['https://json-schema.org/draft-07/schema#'],
      nullable: false,
    },
  },
  required: ['additionalProperties', 'required', 'properties', 'type', 'title', '$id', '$schema'],
  type: 'object',
} as const
